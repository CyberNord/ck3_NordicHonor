#Events for Nordic Honor

namespace = nh

#Ruler picking his opponent for last duel
nh.0001 = {
	type = character_event
	title = {
		desc = nh.0001.t
	}

	desc = nh.0001.reason.desc
	theme = battle

	right_portrait = {
		character = root
 		animation = aggressive_axe
	}

	lower_right_portrait = root.player_heir				# player heir is always expected to fight
	lower_center_portrait = scope:player_rival_option
	lower_left_portrait = scope:player_vassal_option
	
	immediate = {
		
		# player_vassal_option (either Vassal or a honorable knight)
		random_vassal = {
			limit = { 
					OR = { 
						prowess > 20
						has_trait = brave
						has_trait = gallant
					}
					AND = {
						NOR = {
							has_trait = craven
							has_trait = cynical
						}
						OR = {
							is_male = yes
							AND = {
								is_female = yes
								has_trait = shieldmaiden
								NOT = {
									has_trait = pregnant
								}
							}
						}
					}
				}

		save_scope_as = player_vassal_option
		}

		if = { 
			limit = { not = { exists = scope:player_vassal_option } }
			random_knight = { 
				limit = { 
					OR = { 
						prowess > 20
						has_trait = brave
						has_trait = gallant
					}
					AND = {
						NOR = {
							has_trait = craven
							has_trait = cynical
						}
						OR = {
							is_male = yes
							AND = {
								is_female = yes
								has_trait = shieldmaiden
								NOT = {
									has_trait = pregnant
								}
							}
						}
					}
				}   
			save_scope_as = player_vassal_option 
			}
		}
		
		# player rival option
		random_relation = { 
				type = rival
				limit = { 
					NOR = { 
						has_trait = craven
					}
				}
			save_scope_as = player_rival_option
		}
	}

	option = { 
		name = nh.0001.option.nevermind.desc
		custom_tooltip = nh.0001.option.nevermind_tooltip.desc
	}

	# duel heir
	option = { 
		name = nh.0001.option.duel_player_heir.desc
		custom_tooltip = nh.0001.option.duel_player_heir_tooltip.desc

		single_combat_apply_default_shirtlessness_effect = {
			ATTACKER = root
			DEFENDER = root.player_heir
		}

		configure_start_single_combat_effect = {
				SC_INITIATOR = root
				SC_ATTACKER = root
				SC_DEFENDER = root.player_heir
				FATALITY = always
				FIXED = no
				LOCALE = terrain_scope
				OUTPUT_EVENT = nh.0011
				INVALIDATION_EVENT = nh.0021
		}
	}

	# duel rival
	option = { 
		trigger = {
			exists = scope:player_rival_option
		}
		name = nh.0001.option.duel_player_rival.desc
		custom_tooltip = nh.0001.option.duel_player_rival_tooltip.desc

		single_combat_apply_default_shirtlessness_effect = {
			ATTACKER = root
			DEFENDER = player_rival_option
		}

		configure_start_single_combat_effect = {
				SC_INITIATOR = root
				SC_ATTACKER = root
				SC_DEFENDER = player_rival_option
				FATALITY = always
				FIXED = no
				LOCALE = terrain_scope
				OUTPUT_EVENT = nh.0011
				INVALIDATION_EVENT = nh.0021
		}

	}

	# duel vassal/knight
	option = { 
		trigger = {
			exists = scope:player_vassal_option
		}
		name = nh.0001.option.player_vassal_option.desc
		custom_tooltip = nh.0001.option.player_vassal_option_tooltip.desc

		single_combat_apply_default_shirtlessness_effect = {
			ATTACKER = root
			DEFENDER = player_vassal_option
		}

		configure_start_single_combat_effect = {
				SC_INITIATOR = root
				SC_ATTACKER = root
				SC_DEFENDER = player_vassal_option	
				FATALITY = always
				FIXED = no
				LOCALE = terrain_scope
				OUTPUT_EVENT = nh.0011
				INVALIDATION_EVENT = nh.0021
		}
	}

}


#####
# Adapted from dlc/fp1
#####

# BIG TODO - Adapt

# Bout has ended, inform affected parties. 
nh.0011 = {
	hidden = yes

	immediate = {
		# If any clothes were stripped, put 'em back on.
		single_combat_clean_shirtlessness_effect = {
			ATTACKER = scope:actor
			DEFENDER = scope:champion
		}

		# Did scope:actor win?
		if = {
			limit = { scope:sc_victor = scope:actor }

			# And send out the ending events.
			scope:actor = {
				trigger_event = {
					id = nh.0041
					days = 1
				}
			}

			# other died --> no event for other
		}

		# Or was it the other
		else_if = {
			limit = { scope:sc_victor = scope:champion }
			# If scope:actor is still alive, they gain stress.
			if = {
				limit = {
					scope:actor = { is_alive = yes }
				}
				fp1_tbc_actor_defeated_effect = { TBC_LOSER = scope:actor }
			}
			# And send out the ending events.
			
			# actor died --> no event for actor


			scope:recipient = {
				trigger_event = {
					id = nh.0111
					days = 1
				}
			}
		}
	}
}

# Bout has invalidated, inform affected parties.
nh.0021 = {
	hidden = yes

	immediate = {
		# Put your shirts back on.
		single_combat_clean_shirtlessness_effect = {
			ATTACKER = scope:actor
			DEFENDER = scope:recipient
		}

		# Inform both parties that the duel has invalidated.
		scope:actor = {
			send_interface_toast = {	
				title = nh.0021.trigger_failure.actor
				left_icon = scope:recipient
			}
		}
		scope:recipient = {
			send_interface_toast = {	
				title = nh.0021.trigger_failure.recipient
				left_icon = scope:actor
			}
		}
		# Reset scope:actor's cooldowns against scope:recipient.
		# Todo
	}
}

# Scope:actor has won the duel.
nh.0041 = {
	type = character_event
	title = nh.0041.t

	desc = {
		desc = nh.0041.desc.intro
		# Scope:champion died in the fighting
		triggered_desc = {
			trigger = {
				scope:champion = { is_alive = no }
			}
			desc = nh.0041.desc.opponent_died
		}
		desc = nh.0041.desc.outro
	}

	theme = prison
	left_portrait = {
		character = scope:actor
		animation = personality_bold
	}
	right_portrait = {
		character = scope:recipient
		animation = shock
	}
	override_background = { reference = throne_room }

	trigger = {
		# DLC check.
		has_fp1_dlc_trigger = yes
		# Juuuust need to double-check that they're actually alive.
		is_alive = yes
	}

	# The bout closes.
	option = {
		name = nh.0041.a

		# No stress for single-option events.
		ai_chance = {
			# AI will always choose single option.
			base = 100
		}
	}
}

# Scope:recipient has won the duel.
nh.0111 = {
	type = character_event
	title = nh.0111.t
	desc = {
		desc = nh.0111.desc.intro
		# Scope:actor died in the fighting; we don't account for
		triggered_desc = {
			trigger = {
				scope:actor = { is_alive = no }
			}
			desc = nh.0111.desc.opponent_died.recipient_fighting
		}
		
		desc = nh.0111.desc.outro
	}
	theme = prison
	left_portrait = {
		character = scope:recipient
		animation = personality_bold
	}
	right_portrait = {
		character = scope:actor
		animation = shock
	}
	override_background = { reference = throne_room }

	trigger = {
		# DLC check.
		has_fp1_dlc_trigger = yes
		# Juuuust need to double-check that they're actually alive.
		is_alive = yes
	}

	# The bout closes.
	option = {
		name = nh.0111.a

		# No stress for single-option events.
		ai_chance = {
			# AI will always choose single option.
			base = 100
		}
	}
}
